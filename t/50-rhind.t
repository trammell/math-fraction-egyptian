use strict;
#use warnings;
use Data::Dumper;
use Test::More 'no_plan';

our $DEBUG = 1;

use_ok('Math::Fraction::Egyptian','to_egyptian');

sub ahmet {
    my ($n,$d) = @_;
    return to_egyptian($n, $d, dispatch => \&dispatch_ahmet);
}

sub dispatch_ahmet {
    my ($n, $d) = @_;
    my @egypt;

    if ($n == 2) {
        if ($d == 3) {
            return s_small_prime($n,$d);
        }
    }

    my @strategies = (
        [ trivial          => \&s_trivial, ],
        [ small_prime      => \&s_small_prime, ],
        [ practical_strict => \&s_practical_strict, ],
        [ practical        => \&s_practical, ],
        [ greedy           => \&s_greedy, ],
    );

    STRATEGY:
    for my $s (@strategies) {
        my ($name,$coderef) = @$s;
        my @result = eval {
            $coderef->($n,$d);
        };
        if ($@) {
            next STRATEGY;
        }
        else {
            my ($n2, $d2, @e2) = @result;
            warn "$n/$d => $n2/$d2 + [@e2] ($name)\n" if $DEBUG;
            ($n,$d) = ($n2,$d2);
            push @egypt, @e2;
            last STRATEGY;
        }
    }
    return $n, $d, @egypt;
}

# these test values come from the Rhind Mathematical Papyrus; see e.g.
# http://rmprectotable.blogspot.com/2008/07/rmp-2n-table.html

is_deeply([to_egyptian(2,5)], [3,15], '2/5 => (3,15)');
is_deeply([to_egyptian(2,7)], [4,28], '2/7 => (4,28)');
is_deeply([to_egyptian(2,9)], [6,18], '2/7 => (6,18)');
is_deeply([to_egyptian(2,11)], [6,66], '2/11 => (6,66)');

TODO: {
    local $TODO = "2/13 => 8,52,104";
#   local $Math::Fraction::Egyptian::DEBUG = 1;
    is_deeply([ to_egyptian(2,13) ], [ 8, 52, 104 ], "2/13 => 8,52,104" );

    local $Math::Fraction::Egyptian::DEBUG = 0;

is_deeply([to_egyptian(2,15)], [10,30], '2/15 => (10,30)');
is_deeply([to_egyptian(2,17)], [12,51,68], '2/17 => (12,51,68)');
is_deeply([to_egyptian(2,19)], [12,76,114], '2/19 => (12,76,114)');

is_deeply([to_egyptian(2,21)], [14,42], '2/21 => (14,42)');
is_deeply([to_egyptian(2,23)], [12,276], '2/23 => (12,276)');
is_deeply([to_egyptian(2,25)], [15,75], '2/25 => (15,75)');
is_deeply([to_egyptian(2,27)], [18,54], '2/27 => (18,54)');
is_deeply([to_egyptian(2,29)], [24,58,174,232], '2/29 => (24,58,174,232)');

is_deeply([to_egyptian(2,31)], [20,124,155], '2/31 => (20,124,155)');
is_deeply([to_egyptian(2,33)], [22,66],      '2/33 => (22,66)');
is_deeply([to_egyptian(2,35)], [30,42],      '2/35 => (30,42)');
is_deeply([to_egyptian(2,37)], [24,111,296], '2/37 => (24,111,296)');
is_deeply([to_egyptian(2,39)], [26,78],      '2/39 => (26,78)');

is_deeply([to_egyptian(2,41)], [20,124,155], '2/31 => (20,124,155)');
is_deeply([to_egyptian(2,43)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,45)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,47)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,49)], [22,66], '2/33 => (22,66)');

###     2/41  = 2/41*(24/24)= (41 + 4 + 3 )/984 = 1/24 + 1/246 + 1/328
###     2/43  = 2/43*(42/42)=(43 + 21 + 14 + 6)/1806 = 1/42 + 1/86 + 1/129 + 1/301
###     2/45  = 2/45*(2/2)      = ( 3 + 1)/90 = 1/30 + 1/90
###     2/47  = 2/47*(30/30)    = (47 + 10 + 3)/1410 = 1/30 + 1/141 + 1/470
###     2/49  = 2/49*(4/4)      = (7 + 1)/196 = 1/28 + 1/196

is_deeply([to_egyptian(2,51)], [20,124,155], '2/31 => (20,124,155)');
is_deeply([to_egyptian(2,53)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,55)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,57)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,59)], [22,66], '2/33 => (22,66)');

###     2/51  = 2/51*(2/2)      = (3 + 1)/102 = 1/34 + 1/102
###     2/53  = 2/53*(30/30)    = (53 + 5 + 2 )/1590 = 1/30 + 1/318 + 1/795
###     2/55  = 2/55(6/6)       = (11 + 1)/330 = 1/30 + 1/330
###     2/57  = 2/57*(2/2)      = (3 + 1)/114 = 1/38 + 1/114
###     2/59  = 2/59*(36/36)    = (59 + 9 + 4) /2124 = 1/36 + 1/236 + 1/531

is_deeply([to_egyptian(2,61)], [20,124,155], '2/31 => (20,124,155)');
is_deeply([to_egyptian(2,63)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,65)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,67)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,69)], [22,66], '2/33 => (22,66)');

###     2/61  = 2/61*(40/40)    = (61 + 10 + 5 + 4)/2440 = 1/40 + 244 + 1/488 + 1/610
###     2/63  = 2/63*(2/2)      = (3 + 1)/126 = 1/42 + 1/126
###     2/65  = 2/65*(3/3)      = (5 + 1)/195 = 1/39 + 1/195
###     2/67  = 2/67*(40/40)    = (67 + 8 +5 )/2680 = 1/40 + 1/335 + 1/536
###     2/69  = 2/69*(2/2)      = (3 + 1)/138 = 1/46 +1/138

is_deeply([to_egyptian(2,71)], [20,124,155], '2/31 => (20,124,155)');
is_deeply([to_egyptian(2,73)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,75)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,77)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,79)], [22,66], '2/33 => (22,66)');

###     2/71  = 2/71*(40/40)    = (71+ 5 + 4)2840 = 1/40 + 1/568 + 1/710
###     2/73  = 2/73*(60/60)    = (73 + 20 + 15 + 12)/4380 = 1/60 + 1/219 + 1/292 + 1/365
###     2/75  = 2/75*(2/2)      = (3 +1)/150 = 1/50 + 1/75
###     2/77  = 2/77*(4/4)      = (7 + 1)/388 = 1/44 + 1/308
###     2/79  = 2/79*(60/60)    = (79 + 20 + 15 + 6 )/4740 = 1/60 + 237 + 1/316 + 1/790

is_deeply([to_egyptian(2,81)], [20,124,155], '2/31 => (20,124,155)');
is_deeply([to_egyptian(2,83)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,85)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,87)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,89)], [22,66], '2/33 => (22,66)');

###     2/81  = 2/81*(2/2)      = (3 + 1)/162 = 1/54 + 1/162
###     2/83  = 2/83*(60/60)    = (83+ 15 + 12 +10)/4980 = 1/60 + 1/332 + 1/415 + 1/498
###     2/85  = 2/85*(3/3)      = (5 + 1)/255 = 1/51 + 1/255
###     2/87  = 2/87*(2/2)      = (3 + 1)/174 = 1/58 + 1/74
###     2/89  = 2/89*(60/60)    = (89 + 15 +10 + 6)/5340 = 1/60 + 1/356 + 1/534 + 1/890

is_deeply([to_egyptian(2,91)], [20,124,155], '2/31 => (20,124,155)');
is_deeply([to_egyptian(2,93)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,95)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,97)], [22,66], '2/33 => (22,66)');
is_deeply([to_egyptian(2,99)], [22,66], '2/33 => (22,66)');

###     2/91  = 2/91*(70/70)    = (91 + 49)/6370 = 1/70 + 1/130
###     2/93  = 2/93*(2/2)      = (3 + 1)/186 = 1/62 + 1/186
###     2/95  = 2/95*(12/12)    = (19 + 3 + 2)/1140 = 1/60 + 1/380 + 1/570
###     2/97  = 2/97*(56/56)    = (97+ 8 + 7 )/5432 = 1/56 + 1/679 + 1/776
###     2/99  = 2/99*(2/2)      = (3 + 1)/198 = 1/66 + 1/198

is_deeply(
    [to_egyptian(2,101)],
    [101,202,303,606],
    '2/101 => (101,202,303,606)'
);

}


